{"ast":null,"code":"import { of, map } from \"rxjs\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { deselectMember, loadMembers, loadMembersError, loadMembersSuccess } from \"./member.actions\";\nimport { selectMembers } from \"./member.selector\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/_services/members.service\";\nexport let MemberEffects = /*#__PURE__*/(() => {\n  class MemberEffects {\n    constructor(actions$, store, memberService) {\n      this.actions$ = actions$;\n      this.store = store;\n      this.memberService = memberService;\n      this.loadEffect$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loadMembers), switchMap(() => this.memberService.getMembers().pipe(map(response => {\n          console.log(\"Response:\", response); //this.store.dispatch(loadMembersSuccess({ members: response }));\n\n          return loadMembersSuccess({\n            members: response\n          });\n        }), catchError(error => of(loadMembersError(error))))));\n      });\n      this.effectName$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loadMembersSuccess), switchMap(() => {\n          console.log(\"loadMembersSuccess:\");\n          console.log(this.store.select(selectMembers));\n          this.store.select(selectMembers).subscribe(members => {\n            console.log('Members' + members);\n            console.log(members);\n          });\n          return of(loadMembersError({\n            error: ''\n          }));\n        }));\n      });\n      this.effectName1$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loadMembersError), switchMap(() => {\n          console.log(\"loadMembersError:\");\n          console.log(this.store.select(selectMembers));\n          this.store.select(selectMembers).subscribe(members => {\n            console.log('Members' + members);\n            console.log(members);\n          });\n          return of(deselectMember());\n        }));\n      });\n    }\n\n  }\n\n  MemberEffects.ɵfac = function MemberEffects_Factory(t) {\n    return new (t || MemberEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.MembersService));\n  };\n\n  MemberEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MemberEffects,\n    factory: MemberEffects.ɵfac\n  });\n  return MemberEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}