{"ast":null,"code":"import { of, from, map } from \"rxjs\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { loadLogin, loadLoginError, loadLoginSuccess } from \"./login.actions\";\nimport { createEffect, ofType } from '@ngrx/effects';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"src/app/_services/account.service\";\nexport let LoginEffects = /*#__PURE__*/(() => {\n  class LoginEffects {\n    constructor(actions$, store, accountService) {\n      this.actions$ = actions$;\n      this.store = store;\n      this.accountService = accountService;\n      this.effectName$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loadLogin), switchMap(() => from(this.accountService.login(\"\")).pipe(map(() => loadLoginSuccess({\n          user: null\n        })), catchError(error => of(loadLoginError(error))))));\n      });\n    }\n\n  }\n\n  LoginEffects.ɵfac = function LoginEffects_Factory(t) {\n    return new (t || LoginEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.AccountService));\n  };\n\n  LoginEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginEffects,\n    factory: LoginEffects.ɵfac\n  });\n  return LoginEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}