{"ast":null,"code":"import { of, map } from \"rxjs\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { createEffect, ofType } from '@ngrx/effects';\nimport { loadMembers, loadMembersError, loadMembersSuccess } from \"./member.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/_services/members.service\";\nexport let MemberEffects = /*#__PURE__*/(() => {\n  class MemberEffects {\n    constructor(actions$, memberService) {\n      this.actions$ = actions$;\n      this.memberService = memberService;\n      this.effectName$ = createEffect(() => {\n        return this.actions$.pipe(ofType(loadMembers), switchMap(() => this.memberService.getMembers().pipe(map(response => loadMembersSuccess()), catchError(error => of(loadMembersError(error))))));\n      });\n    }\n\n  }\n\n  MemberEffects.ɵfac = function MemberEffects_Factory(t) {\n    return new (t || MemberEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.MembersService));\n  };\n\n  MemberEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MemberEffects,\n    factory: MemberEffects.ɵfac\n  });\n  return MemberEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}